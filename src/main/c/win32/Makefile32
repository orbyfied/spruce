################################################################################
# MIT License
#
# Copyright (c) 2021 drop-lt (droplt)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and\or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
###############################################################################
# From: https:\\gist.github.com\drop-lt\e37d81df535ffedfe14d15a1344e0e93
############################################################
#
# 'make'        build executable file (main)
# 'make clean'  removes all .o and executable files
# 'make run'    runs the file on (projectroot)\(output)\(main)
#
# project pattern:
#
# project-root\
#   include\ <- all .hpp files go here
#   lib\     <- all .cpp files that completemnt the .hpp ones go here
#   src\	 <- standalone .cpp files
#   makefile
#############################################################

#-------------------------Constants-------------------------#

#-------------------------Constants-------------------------#

# define the Cpp compiler to use
CXX = g++

# compile-time flags

#set to -g to debug flags
DEBUG :=

PROJECT_DIR_RELATIVE := ../../../..

#-Wall -Wextra -Wshadow -pedantic -O3
CXXFLAGS := -Wno-write-string -w

# standard libraries
LFLAGS = -Lvector -Lstring -Lutility -Lfunctional -Liostream -Lfstream

# define output directory  (where the executable is)
OUTPUT	:= $(PROJECT_DIR_RELATIVE)/build/natives

# define source directory  (where the main source files are)
SRC	:= .

# define include directory (where the header files are)
INCLUDE	:= .

# define lib directory     (source files from the headers)
LIB	:=

# VERSION OPTIONS
FILE_PREFIX := spruce-win32
VERSION     := 1.0

# OS stuff (dont recommend touching this)

v_arch = 32

ifeq ($(OS),Windows_NT)

v_os := win

# VERSION OUT
NAME_OUT := $(FILE_PREFIX)-v$(VERSION)_$(v_arch)

# output name
MAIN := $(NAME_OUT).dll

# source directory
SOURCEDIRS	:= $(SRC)

# include directory
INCLUDEDIRS	:= $(INCLUDE)

# lib directory
LIBDIRS := $(LIB)

# fix the path function
FIXPATH = $(subst /,\,$1)

# remove
RM := del /q /f

# make directory
MD	:= mkdir

# specify OS
OS := os_windows

else

# output name
MAIN := spruce-win32ansifixer-1.0

# source directory
SOURCEDIRS	:= $(shell find $(SRC) -type d)

# include directory
INCLUDEDIRS	:= $(shell find $(INCLUDE) -type d)

# lib directory
LIBDIRS	:= $(shell find $(LIB) -type d)

# fix the path function
FIXPATH = $1

# remove
RM = rm -f

# make directory
MD	:= mkdir -p

# specify OS
OS := os_other

endif

# From: https://stackoverflow.com/a/12959694/14837740
# Make does not offer a recursive wildcard function, so here's one:
rwildcard=$(wildcard $1$2)$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))

#get all files from include an transform them into -Linclude/(file)
INCLUDES := $(call rwildcard,$(INCLUDEDIRS)/,*.hpp)

# add source file names for futher compiling
SOURCES	:= $(call rwildcard,$(SOURCEDIRS)/,*.cpp)

# add libs file names for futher compiling
# LIBS		:= $(wildcard $(patsubst %,%\*.cpp, $(LIBDIRS:%\=%)))

# define the C object files for the libraries and sources
SRCOBJECTS := $(patsubst %.cpp,%.o,$(SOURCES))
# LIBOBJECTS		+= $(LIBS:.cpp=.o)

# make main path
OUTPUTMAIN	:= $(call FIXPATH,$(OUTPUT)/$(MAIN))

RAW_INCL := -I"${JAVA_HOME}\include" -I"${JAVA_HOME}\include\$(v_os)32" -I"${JAVA_HOME}\include\$(v_os)64" -I"$(PROJECT_DIR_RELATIVE)\build\generated\sources\headers\java\main"

all: $(OUTPUT) $(MAIN) # execute all (output and compile)
	$(info -----all done)

$(OUTPUT): # make output folder
	$(info -----making $(OUTPUT))
	$(call mkdir $(OUTPUT))
# cd $(PROJECT_DIR_RELATIVE/build) && mkdir natives

$(MAIN): $(SRCOBJECTS) # main, requires all objects
	$(info -----linking objects into $(MAIN))
	$(CXX) $(CXXFLAGS) -o $(OUTPUTMAIN) $(SRCOBJECTS) $(LFLAGS) $(INCLUDES) -I $(INCLUDE) $(RAW_INCL) -m32 -D$(OS) -shared
	$(info -----$(MAIN) file sucessfully linked)


.cpp.o:
	$(info -----compiling $< into $@)
	$(CXX) $(CXXFLAGS) -I $(INCLUDE) -c $< -o $@ -D$(OS) -m32 $(RAW_INCL)
	$(info -----$< sucessfully compiled into $@)

.PHONY: clean

clean: # removes object files and executable
	$(info -----cleaning project)
#	$(RM) -r .\$(OUTPUT)\*
#	$(RM) $(call FIXPATH,$(LIBOBJECTS))
	$(RM) $(call FIXPATH,$(SRCOBJECTS))
	$(info -----project cleaned)

run: all # a shortcut to run the code
	.\$(OUTPUTMAIN)